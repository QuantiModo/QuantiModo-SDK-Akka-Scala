/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Variable
import io.swagger.client.model.UserVariables
import io.swagger.client.model.VariableCategory
import io.swagger.client.model.VariablesNew
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object VariablesApi {

  /**
   * This endpoint retrieves an array of all public variables. Public variables are things like foods, medications, symptoms, conditions, and anything not unique to a particular user. For instance, a telephone number or name would not be a public variable.
   * 
   * Expected answers:
   *   code 200 : Variable (Successful operation)
   *   code 401 :  (Not Authenticated)
   */
  def v1PublicVariablesGet(): ApiRequest[Variable] =
    ApiRequest[Variable](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/public/variables", "application/json")
      .withSuccessResponse[Variable](200)
      .withErrorResponse[Unit](401)
        /**
   * Get top 5 PUBLIC variables with the most correlations containing the entered search characters. For example, search for &#39;mood&#39; as an effect. Since &#39;Overall Mood&#39; has a lot of correlations with other variables, it should be in the autocomplete list.&lt;br&gt;Supported filter parameters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;category&lt;/b&gt; - Category of Variable&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;
   * 
   * Expected answers:
   *   code 200 : Variable (Variables returned)
   *   code 401 :  (Not Authenticated)
   * 
   * @param search Search query can be some fraction of a variable name.
   * @param accessToken User&#39;s OAuth2 access token
   * @param categoryName Filter variables by category name. The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
   * @param source Specify a data source name to only return variables from a specific data source.
   * @param effectOrCause Indicate if you only want variables that have user correlations.  Possible values are effect and cause.
   * @param publicEffectOrCause Indicate if you only want variables that have aggregated correlations.  Possible values are effect and cause.
   * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
   * @param offset Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10.
   * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
   */
  def v1PublicVariablesSearchSearchGet(search: String, accessToken: Option[String] = None, categoryName: Option[String] = None, source: Option[String] = None, effectOrCause: Option[String] = None, publicEffectOrCause: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None, sort: Option[Int] = None): ApiRequest[Variable] =
    ApiRequest[Variable](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/public/variables/search/{search}", "application/json")
      .withQueryParam("access_token", accessToken)
      .withQueryParam("categoryName", categoryName)
      .withQueryParam("source", source)
      .withQueryParam("effectOrCause", effectOrCause)
      .withQueryParam("publicEffectOrCause", publicEffectOrCause)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withQueryParam("sort", sort)
      .withPathParam("search", search)
      .withSuccessResponse[Variable](200)
      .withErrorResponse[Unit](401)
        /**
   * Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   *   code 400 :  (The received JSON was invalid or malformed)
   *   code 401 :  (Not Authenticated)
   *   code 404 :  (Unknown target user ID)
   * 
   * @param userVariables Variable user settings data
   */
  def v1UserVariablesPost(userVariables: UserVariables): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/userVariables", "application/json")
      .withBody(userVariables)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
        /**
   * The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
   * 
   * Expected answers:
   *   code 200 : Seq[VariableCategory] (Successful operation)
   *   code 401 :  (Not Authenticated)
   */
  def v1VariableCategoriesGet(): ApiRequest[Seq[VariableCategory]] =
    ApiRequest[Seq[VariableCategory]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/variableCategories", "application/json")
      .withSuccessResponse[Seq[VariableCategory]](200)
      .withErrorResponse[Unit](401)
        /**
   * Get variables by the category name. &lt;br&gt;Supported filter parameters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;name&lt;/b&gt; - Original name of the variable (supports exact name match only)&lt;/li&gt;&lt;li&gt;&lt;b&gt;lastUpdated&lt;/b&gt; - Filter by the last time any of the properties of the variable were changed. Uses UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;li&gt;&lt;b&gt;source&lt;/b&gt; - The name of the data source that created the variable (supports exact name match only). So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here&lt;/li&gt;&lt;li&gt;&lt;b&gt;latestMeasurementTime&lt;/b&gt; - Filter variables based on the last time a measurement for them was created or updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;li&gt;&lt;b&gt;numberOfMeasurements&lt;/b&gt; - Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity.&lt;/li&gt;&lt;li&gt;&lt;b&gt;lastSource&lt;/b&gt; - Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here. (supports exact name match only)&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;
   * 
   * Expected answers:
   *   code 200 : Variable (Variables returned)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   basicAuth (basic)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   * @param id Common variable id
   * @param userId User id
   * @param category Filter data by category
   * @param name Original name of the variable (supports exact name match only)
   * @param lastUpdated Filter by the last time any of the properties of the variable were changed. Uses UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
   * @param source The name of the data source that created the variable (supports exact name match only). So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here
   * @param latestMeasurementTime Filter variables based on the last time a measurement for them was created or updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
   * @param numberOfMeasurements Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity.
   * @param lastSource Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here. (supports exact name match only)
   * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
   * @param offset Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10.
   * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
   */
  def v1VariablesGet(accessToken: Option[String] = None, id: Option[Int] = None, userId: Option[Int] = None, category: Option[String] = None, name: Option[String] = None, lastUpdated: Option[String] = None, source: Option[String] = None, latestMeasurementTime: Option[String] = None, numberOfMeasurements: Option[String] = None, lastSource: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None, sort: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Variable] =
    ApiRequest[Variable](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/variables", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("id", id)
      .withQueryParam("userId", userId)
      .withQueryParam("category", category)
      .withQueryParam("name", name)
      .withQueryParam("lastUpdated", lastUpdated)
      .withQueryParam("source", source)
      .withQueryParam("latestMeasurementTime", latestMeasurementTime)
      .withQueryParam("numberOfMeasurements", numberOfMeasurements)
      .withQueryParam("lastSource", lastSource)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withQueryParam("sort", sort)
      .withSuccessResponse[Variable](200)
      .withErrorResponse[Unit](401)
        /**
   * Allows the client to create a new variable in the &#x60;variables&#x60; table.
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   *   code 201 :  (Variable created)
   *   code 401 :  (Not Authenticated)
   * 
   * @param body Original name for the variable.
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v1VariablesPost(body: VariablesNew, accessToken: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/variables", "application/json")
      .withBody(body)
      .withQueryParam("access_token", accessToken)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](201)
      .withErrorResponse[Unit](401)
        /**
   * Get variables containing the search characters for which the currently logged in user has measurements. Used to provide auto-complete function in variable search boxes.
   * 
   * Expected answers:
   *   code 200 : Seq[Variable] (Successful operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param search Search query which may be an entire variable name or a fragment of one.
   * @param accessToken User&#39;s OAuth2 access token
   * @param categoryName Filter variables by category name. The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
   * @param includePublic Set to true if you would like to include public variables when no user variables are found.
   * @param manualTracking Set to true if you would like to exlude variables like apps and website names.
   * @param source Specify a data source name to only return variables from a specific data source.
   * @param effectOrCause Indicate if you only want variables that have user correlations.  Possible values are effect and cause.
   * @param publicEffectOrCause Indicate if you only want variables that have aggregated correlations.  Possible values are effect and cause.
   * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
   * @param offset Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10.
   */
  def v1VariablesSearchSearchGet(search: String, accessToken: Option[String] = None, categoryName: Option[String] = None, includePublic: Option[Boolean] = None, manualTracking: Option[Boolean] = None, source: Option[String] = None, effectOrCause: Option[String] = None, publicEffectOrCause: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None): ApiRequest[Seq[Variable]] =
    ApiRequest[Seq[Variable]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/variables/search/{search}", "application/json")
      .withQueryParam("access_token", accessToken)
      .withQueryParam("categoryName", categoryName)
      .withQueryParam("includePublic", includePublic)
      .withQueryParam("manualTracking", manualTracking)
      .withQueryParam("source", source)
      .withQueryParam("effectOrCause", effectOrCause)
      .withQueryParam("publicEffectOrCause", publicEffectOrCause)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withPathParam("search", search)
      .withSuccessResponse[Seq[Variable]](200)
      .withErrorResponse[Unit](401)
        /**
   * Get all of the settings and information about a variable by its name. If the logged in user has modified the settings for the variable, these will be provided instead of the default settings for that variable.
   * 
   * Expected answers:
   *   code 200 : Variable (Variables returned)
   *   code 401 :  (Not Authenticated)
   * 
   * @param variableName Variable name
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v1VariablesVariableNameGet(variableName: String, accessToken: Option[String] = None): ApiRequest[Variable] =
    ApiRequest[Variable](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/variables/{variableName}", "application/json")
      .withQueryParam("access_token", accessToken)
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Variable](200)
      .withErrorResponse[Unit](401)
      

}

