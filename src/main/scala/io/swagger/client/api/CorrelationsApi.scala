/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Correlation
import io.swagger.client.model.JsonErrorResponse
import io.swagger.client.model.PostCorrelation
import io.swagger.client.model.CommonResponse
import io.swagger.client.model.VoteDelete
import io.swagger.client.model.PostVote
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object CorrelationsApi {

  /**
   * Get correlations based on the anonymized aggregate data from all QuantiModo users.
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   * @param effect ORIGINAL variable name of the effect variable for which the user desires correlations
   * @param cause ORIGINAL variable name of the cause variable for which the user desires correlations
   * @param correlationCoefficient Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action
   * @param onsetDelay The number of seconds which pass following a cause measurement before an effect would likely be observed.
   * @param durationOfAction The time in seconds over which the cause would be expected to exert a measurable effect. We have selected a default value for each variable. This default value may be replaced by a user specified by adjusting their variable user settings.
   * @param lastUpdated The time that this measurement was last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
   * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
   * @param offset Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10.
   * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
   */
  def v1AggregatedCorrelationsGet(accessToken: Option[String] = None, effect: Option[String] = None, cause: Option[String] = None, correlationCoefficient: Option[String] = None, onsetDelay: Option[String] = None, durationOfAction: Option[String] = None, lastUpdated: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None, sort: Option[Int] = None): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/aggregatedCorrelations", "application/json")
      .withQueryParam("access_token", accessToken)
      .withQueryParam("effect", effect)
      .withQueryParam("cause", cause)
      .withQueryParam("correlationCoefficient", correlationCoefficient)
      .withQueryParam("onsetDelay", onsetDelay)
      .withQueryParam("durationOfAction", durationOfAction)
      .withQueryParam("lastUpdated", lastUpdated)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withQueryParam("sort", sort)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Add correlation
   * 
   * Expected answers:
   *   code 200 :  (Successful Operation)
   *   code 400 : JsonErrorResponse (Bad request)
   *   code 401 :  (Not Authenticated)
   * 
   * @param body Provides correlation data
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v1AggregatedCorrelationsPost(body: PostCorrelation, accessToken: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/aggregatedCorrelations", "application/json")
      .withBody(body)
      .withQueryParam("access_token", accessToken)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[JsonErrorResponse](400)
      .withErrorResponse[Unit](401)
        /**
   * Get correlations.&lt;br&gt;Supported filter parameters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;correlationCoefficient&lt;/b&gt; - Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action&lt;/li&gt;&lt;li&gt;&lt;b&gt;onsetDelay&lt;/b&gt; - The number of seconds which pass following a cause measurement before an effect would likely be observed.&lt;/li&gt;&lt;li&gt;&lt;b&gt;durationOfAction&lt;/b&gt; - The time in seconds over which the cause would be expected to exert a measurable effect. We have selected a default value for each variable. This default value may be replaced by a user specified by adjusting their variable user settings.&lt;/li&gt;&lt;li&gt;&lt;b&gt;lastUpdated&lt;/b&gt; - The time that this measurement was last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   * @param effect ORIGINAL variable name of the effect variable for which the user desires correlations
   * @param cause ORIGINAL variable name of the cause variable for which the user desires correlations
   * @param correlationCoefficient Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action
   * @param onsetDelay The number of seconds which pass following a cause measurement before an effect would likely be observed.
   * @param durationOfAction The time in seconds over which the cause would be expected to exert a measurable effect. We have selected a default value for each variable. This default value may be replaced by a user specified by adjusting their variable user settings.
   * @param lastUpdated The time that this measurement was last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
   * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
   * @param offset Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10.
   * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
   */
  def v1CorrelationsGet(accessToken: Option[String] = None, effect: Option[String] = None, cause: Option[String] = None, correlationCoefficient: Option[String] = None, onsetDelay: Option[String] = None, durationOfAction: Option[String] = None, lastUpdated: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None, sort: Option[Int] = None): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/correlations", "application/json")
      .withQueryParam("access_token", accessToken)
      .withQueryParam("effect", effect)
      .withQueryParam("cause", cause)
      .withQueryParam("correlationCoefficient", correlationCoefficient)
      .withQueryParam("onsetDelay", onsetDelay)
      .withQueryParam("durationOfAction", durationOfAction)
      .withQueryParam("lastUpdated", lastUpdated)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withQueryParam("sort", sort)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns average of all correlations and votes for all user cause variables for a given cause. If parameter \&quot;include_public\&quot; is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param organizationId Organization ID
   * @param userId User id
   * @param variableName Effect variable name
   * @param organizationToken Organization access token
   * @param accessToken User&#39;s OAuth2 access token
   * @param includePublic Include public correlations, Can be \&quot;1\&quot; or empty.
   */
  def v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet(organizationId: Int, userId: Int, variableName: String, organizationToken: String, accessToken: Option[String] = None, includePublic: Option[String] = None): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/causes", "application/json")
      .withQueryParam("access_token", accessToken)
      .withQueryParam("organization_token", organizationToken)
      .withQueryParam("includePublic", includePublic)
      .withPathParam("organizationId", organizationId)
      .withPathParam("userId", userId)
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns average of all correlations and votes for all user cause variables for a given effect. If parameter \&quot;include_public\&quot; is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.
   * 
   * Expected answers:
   *   code 200 : Seq[CommonResponse] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param organizationId Organization ID
   * @param userId User id
   * @param variableName Cause variable name
   * @param organizationToken Organization access token
   * @param accessToken User&#39;s OAuth2 access token
   * @param includePublic Include public correlations, Can be \&quot;1\&quot; or empty.
   */
  def v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet(organizationId: Int, userId: Int, variableName: String, organizationToken: String, accessToken: Option[String] = None, includePublic: Option[String] = None): ApiRequest[Seq[CommonResponse]] =
    ApiRequest[Seq[CommonResponse]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/effects", "application/json")
      .withQueryParam("access_token", accessToken)
      .withQueryParam("organization_token", organizationToken)
      .withQueryParam("include_public", includePublic)
      .withPathParam("organizationId", organizationId)
      .withPathParam("userId", userId)
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Seq[CommonResponse]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns the average correlations from all users for all public variables that contain the characters in the search query. Returns average of all users public variable correlations with a specified cause or effect.
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param search Name of the variable that you want to know the causes or effects of.
   * @param effectOrCause Setting this to effect indicates that the searched variable is the effect and that the causes of this variable should be returned.  cause indicates that the searched variable is the cause and the effects should be returned.
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v1PublicCorrelationsSearchSearchGet(search: String, effectOrCause: String, accessToken: Option[String] = None): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/public/correlations/search/{search}", "application/json")
      .withQueryParam("access_token", accessToken)
      .withQueryParam("effectOrCause", effectOrCause)
      .withPathParam("search", search)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns average of all correlations and votes for all user cause variables for a given effect
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param variableName Effect variable name
   */
  def v1VariablesVariableNameCausesGet(variableName: String): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/variables/{variableName}/causes", "application/json")
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns average of all correlations and votes for all user effect variables for a given cause
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param variableName Cause variable name
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v1VariablesVariableNameEffectsGet(variableName: String, accessToken: Option[String] = None): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/variables/{variableName}/effects", "application/json")
      .withQueryParam("access_token", accessToken)
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns average of all correlations and votes for all public cause variables for a given effect
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param variableName Effect variable name
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v1VariablesVariableNamePublicCausesGet(variableName: String, accessToken: Option[String] = None): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/variables/{variableName}/public/causes", "application/json")
      .withQueryParam("access_token", accessToken)
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns average of all correlations and votes for all public cause variables for a given cause
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param variableName Cause variable name
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v1VariablesVariableNamePublicEffectsGet(variableName: String, accessToken: Option[String] = None): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/variables/{variableName}/public/effects", "application/json")
      .withQueryParam("access_token", accessToken)
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Delete previously posted vote
   * 
   * Expected answers:
   *   code 200 : CommonResponse (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param body The cause and effect variable names for the predictor vote to be deleted.
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v1VotesDeletePost(body: VoteDelete, accessToken: Option[String] = None): ApiRequest[CommonResponse] =
    ApiRequest[CommonResponse](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/votes/delete", "application/json")
      .withBody(body)
      .withQueryParam("access_token", accessToken)
      .withSuccessResponse[CommonResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * This is to enable users to indicate their opinion on the plausibility of a causal relationship between a treatment and outcome. QuantiModo incorporates crowd-sourced plausibility estimations into their algorithm. This is done allowing user to indicate their view of the plausibility of each relationship with thumbs up/down buttons placed next to each prediction.
   * 
   * Expected answers:
   *   code 200 : CommonResponse (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param body Contains the cause variable, effect variable, and vote value.
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v1VotesPost(body: PostVote, accessToken: Option[String] = None): ApiRequest[CommonResponse] =
    ApiRequest[CommonResponse](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/votes", "application/json")
      .withBody(body)
      .withQueryParam("access_token", accessToken)
      .withSuccessResponse[CommonResponse](200)
      .withErrorResponse[Unit](401)
      

}

