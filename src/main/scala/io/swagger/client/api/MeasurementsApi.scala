/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.MeasurementSource
import io.swagger.client.model.Measurement
import io.swagger.client.model.MeasurementDelete
import io.swagger.client.model.CommonResponse
import io.swagger.client.model.MeasurementSet
import io.swagger.client.model.MeasurementRange
import java.io.File
import io.swagger.client.model.Inline_response_200_12
import io.swagger.client.model.Inline_response_200_11
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object MeasurementsApi {

  /**
   * Returns a list of all the apps from which measurement data is obtained.
   * 
   * Expected answers:
   *   code 200 : MeasurementSource (Successful operation)
   *   code 401 :  (Not Authenticated)
   */
  def v1MeasurementSourcesGet(): ApiRequest[MeasurementSource] =
    ApiRequest[MeasurementSource](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/measurementSources", "application/json")
      .withSuccessResponse[MeasurementSource](200)
      .withErrorResponse[Unit](401)
        /**
   * Add a life-tracking app or device to the QuantiModo list of data sources.
   * 
   * Expected answers:
   *   code 401 :  (Not Authenticated)
   * 
   * @param body An array of names of data sources you want to add.
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v1MeasurementSourcesPost(body: MeasurementSource, accessToken: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/measurementSources", "application/json")
      .withBody(body)
      .withQueryParam("access_token", accessToken)
      .withErrorResponse[Unit](401)
        /**
   * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. &lt;br&gt;Supported filter parameters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;value&lt;/b&gt; - Value of measurement&lt;/li&gt;&lt;li&gt;&lt;b&gt;lastUpdated&lt;/b&gt; - The time that this measurement was created or last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;
   * 
   * Expected answers:
   *   code 200 : Measurement (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param variableName Name of the variable you want measurements for
   * @param accessToken User&#39;s OAuth2 access token
   * @param abbreviatedUnitName The unit your want the measurements in
   * @param startTime The lower limit of measurements returned (Iso8601)
   * @param endTime The upper limit of measurements returned (Iso8601)
   * @param groupingWidth The time (in seconds) over which measurements are grouped together
   * @param groupingTimezone The time (in seconds) over which measurements are grouped together
   * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
   * @param offset Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10.
   * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
   */
  def v1MeasurementsDailyGet(variableName: String, accessToken: Option[String] = None, abbreviatedUnitName: Option[String] = None, startTime: Option[String] = None, endTime: Option[String] = None, groupingWidth: Option[Int] = None, groupingTimezone: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None, sort: Option[Int] = None): ApiRequest[Measurement] =
    ApiRequest[Measurement](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/measurements/daily", "application/json")
      .withQueryParam("access_token", accessToken)
      .withQueryParam("variableName", variableName)
      .withQueryParam("abbreviatedUnitName", abbreviatedUnitName)
      .withQueryParam("startTime", startTime)
      .withQueryParam("endTime", endTime)
      .withQueryParam("groupingWidth", groupingWidth)
      .withQueryParam("groupingTimezone", groupingTimezone)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withQueryParam("sort", sort)
      .withSuccessResponse[Measurement](200)
      .withErrorResponse[Unit](401)
        /**
   * Delete a previously submitted measurement
   * 
   * Expected answers:
   *   code 200 : CommonResponse (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param body The startTime and variableId of the measurement to be deleted.
   */
  def v1MeasurementsDeletePost(body: MeasurementDelete): ApiRequest[CommonResponse] =
    ApiRequest[CommonResponse](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/measurements/delete", "application/json")
      .withBody(body)
      .withSuccessResponse[CommonResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. &lt;br&gt;Supported filter parameters:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;value&lt;/b&gt; - Value of measurement&lt;/li&gt;&lt;li&gt;&lt;b&gt;lastUpdated&lt;/b&gt; - The time that this measurement was created or last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;
   * 
   * Expected answers:
   *   code 200 : Measurement (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   * @param variableName Name of the variable you want measurements for
   * @param variableCategoryName Name of the variable category you want measurements for
   * @param source Name of the source you want measurements for (supports exact name match only)
   * @param value Value of measurement
   * @param lastUpdated The time that this measurement was created or last updated in the format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
   * @param unit The unit you want the measurements returned in
   * @param startTime The lower limit of measurements returned (Epoch)
   * @param createdAt The time the measurement record was first created in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
   * @param updatedAt The time the measurement record was last changed in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
   * @param endTime The upper limit of measurements returned (Epoch)
   * @param groupingWidth The time (in seconds) over which measurements are grouped together
   * @param groupingTimezone The time (in seconds) over which measurements are grouped together
   * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
   * @param offset Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10.
   * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
   */
  def v1MeasurementsGet(accessToken: Option[String] = None, variableName: Option[String] = None, variableCategoryName: Option[String] = None, source: Option[String] = None, value: Option[String] = None, lastUpdated: Option[String] = None, unit: Option[String] = None, startTime: Option[String] = None, createdAt: Option[String] = None, updatedAt: Option[String] = None, endTime: Option[String] = None, groupingWidth: Option[Int] = None, groupingTimezone: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None, sort: Option[Int] = None): ApiRequest[Measurement] =
    ApiRequest[Measurement](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/measurements", "application/json")
      .withQueryParam("access_token", accessToken)
      .withQueryParam("variableName", variableName)
      .withQueryParam("variableCategoryName", variableCategoryName)
      .withQueryParam("source", source)
      .withQueryParam("value", value)
      .withQueryParam("lastUpdated", lastUpdated)
      .withQueryParam("unit", unit)
      .withQueryParam("startTime", startTime)
      .withQueryParam("createdAt", createdAt)
      .withQueryParam("updatedAt", updatedAt)
      .withQueryParam("endTime", endTime)
      .withQueryParam("groupingWidth", groupingWidth)
      .withQueryParam("groupingTimezone", groupingTimezone)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withQueryParam("sort", sort)
      .withSuccessResponse[Measurement](200)
      .withErrorResponse[Unit](401)
        /**
   * You can submit or update multiple measurements in a \&quot;measurements\&quot; sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.  The request body should look something like [{\&quot;measurements\&quot;:[{\&quot;startTime\&quot;:1439389320,\&quot;value\&quot;:\&quot;3\&quot;}, {\&quot;startTime\&quot;:1439389319,\&quot;value\&quot;:\&quot;2\&quot;}],\&quot;name\&quot;:\&quot;Acne (out of 5)\&quot;,\&quot;source\&quot;:\&quot;QuantiModo\&quot;,\&quot;category\&quot;:\&quot;Symptoms\&quot;,\&quot;combinationOperation\&quot;:\&quot;MEAN\&quot;,\&quot;unit\&quot;:\&quot;/5\&quot;}]
   * 
   * Expected answers:
   *   code 200 :  (Measurements successfully stored)
   *   code 401 :  (Not Authenticated)
   * 
   * @param body An array of measurements you want to insert.
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v1MeasurementsPost(body: MeasurementSet, accessToken: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/measurements", "application/json")
      .withBody(body)
      .withQueryParam("access_token", accessToken)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](401)
        /**
   * Get Unix time-stamp (epoch time) of the user&#39;s first and last measurements taken.
   * 
   * Expected answers:
   *   code 200 : MeasurementRange (Successful operation)
   *   code 401 :  (Not Authenticated)
   * 
   * @param sources Enter source name to limit to specific source (varchar)
   * @param user If not specified, uses currently logged in user (bigint)
   */
  def v1MeasurementsRangeGet(sources: Option[String] = None, user: Option[Int] = None): ApiRequest[MeasurementRange] =
    ApiRequest[MeasurementRange](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/measurementsRange", "application/json")
      .withQueryParam("sources", sources)
      .withQueryParam("user", user)
      .withSuccessResponse[MeasurementRange](200)
      .withErrorResponse[Unit](401)
        /**
   * Download a CSV containing all user measurements
   * 
   * Expected answers:
   *   code 200 : File (successful operation)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v2MeasurementsCsvGet(accessToken: Option[String] = None): ApiRequest[File] =
    ApiRequest[File](ApiMethods.GET, "https://app.quantimo.do/api", "/v2/measurements/csv", "application/json")
      .withQueryParam("access_token", accessToken)
      .withSuccessResponse[File](200)
        /**
   * Delete Measurement
   * 
   * Expected answers:
   *   code 200 : Inline_response_200_12 (successful operation)
   * 
   * @param id id of Measurement
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v2MeasurementsIdDelete(id: Int, accessToken: Option[String] = None): ApiRequest[Inline_response_200_12] =
    ApiRequest[Inline_response_200_12](ApiMethods.DELETE, "https://app.quantimo.do/api", "/v2/measurements/{id}", "application/json")
      .withQueryParam("access_token", accessToken)
      .withPathParam("id", id)
      .withSuccessResponse[Inline_response_200_12](200)
        /**
   * Get Measurement
   * 
   * Expected answers:
   *   code 200 : Inline_response_200_11 (successful operation)
   * 
   * @param id id of Measurement
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v2MeasurementsIdGet(id: Int, accessToken: Option[String] = None): ApiRequest[Inline_response_200_11] =
    ApiRequest[Inline_response_200_11](ApiMethods.GET, "https://app.quantimo.do/api", "/v2/measurements/{id}", "application/json")
      .withQueryParam("access_token", accessToken)
      .withPathParam("id", id)
      .withSuccessResponse[Inline_response_200_11](200)
        /**
   * Update Measurement
   * 
   * Expected answers:
   *   code 200 : Inline_response_200_12 (successful operation)
   * 
   * @param id id of Measurement
   * @param accessToken User&#39;s OAuth2 access token
   * @param body Measurement that should be updated
   */
  def v2MeasurementsIdPut(id: Int, accessToken: Option[String] = None, body: Option[Measurement] = None): ApiRequest[Inline_response_200_12] =
    ApiRequest[Inline_response_200_12](ApiMethods.PUT, "https://app.quantimo.do/api", "/v2/measurements/{id}", "application/json")
      .withBody(body)
      .withQueryParam("access_token", accessToken)
      .withPathParam("id", id)
      .withSuccessResponse[Inline_response_200_12](200)
        /**
   * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
   * 
   * Expected answers:
   *   code 200 : Int (successful operation)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v2MeasurementsRequestCsvPost(accessToken: Option[String] = None): ApiRequest[Int] =
    ApiRequest[Int](ApiMethods.POST, "https://app.quantimo.do/api", "/v2/measurements/request_csv", "application/json")
      .withQueryParam("access_token", accessToken)
      .withSuccessResponse[Int](200)
        /**
   * Use this endpoint to schedule a PDF export containing all user measurements to be emailed to the user within 24 hours.
   * 
   * Expected answers:
   *   code 200 : Int (successful operation)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v2MeasurementsRequestPdfPost(accessToken: Option[String] = None): ApiRequest[Int] =
    ApiRequest[Int](ApiMethods.POST, "https://app.quantimo.do/api", "/v2/measurements/request_pdf", "application/json")
      .withQueryParam("access_token", accessToken)
      .withSuccessResponse[Int](200)
        /**
   * Use this endpoint to schedule a XLS export containing all user measurements to be emailed to the user within 24 hours.
   * 
   * Expected answers:
   *   code 200 : Int (successful operation)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v2MeasurementsRequestXlsPost(accessToken: Option[String] = None): ApiRequest[Int] =
    ApiRequest[Int](ApiMethods.POST, "https://app.quantimo.do/api", "/v2/measurements/request_xls", "application/json")
      .withQueryParam("access_token", accessToken)
      .withSuccessResponse[Int](200)
      

}

