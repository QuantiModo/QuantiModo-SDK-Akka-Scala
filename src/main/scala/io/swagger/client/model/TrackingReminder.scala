/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */

package io.swagger.client.model

import io.swagger.client.core.ApiModel
import org.joda.time.DateTime


case class TrackingReminder (
  /* id */
  id: Option[Int],
  /* clientId */
  clientId: Option[String],
  /* ID of User */
  userId: Option[Int],
  /* Id for the variable to be tracked */
  variableId: Int,
  /* Default value to use for the measurement when tracking */
  defaultValue: Option[Float],
  /* Earliest time of day at which reminders should appear in UTC HH:MM:SS format */
  reminderStartTime: Option[String],
  /* Latest time of day at which reminders should appear in UTC HH:MM:SS format */
  reminderEndTime: Option[String],
  /* String identifier for the sound to accompany the reminder */
  reminderSound: Option[String],
  /* Number of seconds between one reminder and the next */
  reminderFrequency: Option[Int],
  /* True if the reminders should appear as a popup notification */
  popUp: Option[Boolean],
  /* True if the reminders should be delivered via SMS */
  sms: Option[Boolean],
  /* True if the reminders should be delivered via email */
  email: Option[Boolean],
  /* True if the reminders should appear in the notification bar */
  notificationBar: Option[Boolean],
  /* ISO 8601 timestamp for the last time a reminder was sent */
  lastReminded: Option[DateTime],
  /* ISO 8601 timestamp for the last time a measurement was received for this user and variable */
  lastTracked: Option[DateTime],
  /* Specific first time of day that the user should be reminded to track in UTC HH:MM:SS format */
  firstDailyReminderTime: Option[String],
  /* Specific second time of day that the user should be reminded to track in UTC HH:MM:SS format */
  secondDailyReminderTime: Option[String],
  /* Specific third time of day that the user should be reminded to track in UTC HH:MM:SS format */
  thirdDailyReminderTime: Option[String],
  /* Earliest date on which the user should be reminded to track in YYYY-MM-DD format */
  startTrackingDate: Option[String],
  /* Latest date on which the user should be reminded to track in YYYY-MM-DD format */
  stopTrackingDate: Option[String],
  /* When the record in the database was last updated. Use ISO 8601 datetime format. Time zone should be UTC and not local. */
  updatedAt: Option[DateTime],
  /* Name of the variable to be used when sending measurements */
  variableName: Option[String],
  /* Name of the variable category to be used when sending measurements */
  variableCategoryName: Option[String],
  /* Abbreviated name of the unit to be used when sending measurements */
  abbreviatedUnitName: Option[String],
  /* The way multiple measurements are aggregated over time */
  combinationOperation: Option[TrackingReminderEnums.CombinationOperation])
   extends ApiModel

object TrackingReminderEnums {

  type CombinationOperation = CombinationOperation.Value
  
  object CombinationOperation extends Enumeration {
    val MEAN = Value("MEAN")
    val SUM = Value("SUM")
  }

  
}

